1. FE collects credentials user_email and user_password via a secure login form and performs immediate form validation (syntax, length, etc.); optionally displays client-side error hints.

2. FE sends an HTTPS POST request with credentials (JSON payload) to the BE /login endpoint.

3. BE receives the login request and validates the inputs server-side (e.g., email format, password structure) to thwart malformed requests.

4. BE queries the persistent data store for the user record by email; if none is found, BE returns an error response to FE.

5. BE verifies the supplied password against the stored hash. On failure, BE returns a generic authentication error (do not leak details).

6. BE checks for an existing session (via HttpOnly “session_id” cookie). If found, it invalidates the old session in the session store, ensuring a single active session.

7. BE creates a new session ID, persists the session mapping (user ID ➔ session ID), and builds a secure cookie with session attributes (HttpOnly, Secure, path, same_site).

8. BE responds with a JSON body (e.g., user_id, success message) alongside the Set-Cookie header containing the new session_id. FE receives updated cookies automatically via the browser’s HTTP infrastructure.

9. FE updates its state (e.g., in a Redux store or context) by marking the user as authenticated; it may initiate a redirect or render authenticated views.

10. For logout, FE triggers a logout action (user click, inactivity, etc.) sending an HTTPS request to the BE /logout endpoint.

11. BE receives the logout request, reads the session cookie, and asynchronously invalidates the session in its store.

12. BE builds a removal cookie (with same domain/path attributes, empty session_id, expiry in the past) and returns a logout response.

13. FE processes the logout response, and the browser clears the session cookie based on the removal settings; the FE application state is updated to reflect the logged-out status.

14. FE optionally clears any client-stored authentication states (tokens, cached user data, etc.) and, if needed, redirects the user to a login or landing page.

This integrated flow ensures that both client and server enforce security policies, intimate state synchronization, and proper session lifecycle handling across login and logout events.

How does the FE utilize the session_id? Just leave it in the cookie and the BE does the validation? What about state management (whether you're logged in or not), is that safe to just be FE-managed in local storage?

FE should leave session_id management to the BE via HttpOnly cookies. The browser automatically attaches the cookie on subsequent HTTPS requests, and BE validates the session server-side, ensuring integrity and freshness.

For client-side state—like whether a user is "logged in"—avoid storing sensitive flags in local storage or similar persistent stores. Instead:

• Maintain a volatile (in-memory) auth state, synchronized with BE session validity via API checks.
• Use local state managers (e.g., React Context, Redux) to conditionally render UI based on BE-confirmed session status.
• Optionally, on app boot, trigger a BE endpoint (or rely on cookie-based session refresh) to verify that the session cookie remains valid.

In summary, the session_id cookie is secure if configured (HttpOnly, Secure) and the BE does the heavy lifting. Client-side Boolean flags for “logged in” should be transient, not persisted in local storage, to minimize the risk of spoofing or stale state.

OK, if I have that volatile of an auth state, then how do I even keep users logged in?

The BE manages persistent login via secure session cookies. The FE stores only a volatile auth state variable to track UI rendering. On refresh or app boot, the FE makes an API call to a session-check endpoint that returns the current authentication status based on the HttpOnly session cookie. This check repopulates the FE's in-memory auth state. In this design, the session cookie (configured as HttpOnly and Secure) persists across sessions while the FE's transient state is rehydrated on load.

_Ah_.

The BE maintains a persistent session via secure, HttpOnly cookies. Upon a page refresh, the FE triggers a "session revive" API call (or similar health-check endpoint) that reads the cookie and validates the session on the BE. The BE returns the auth status and any associated user metadata, which the FE then uses to reinitialize its in-memory auth state.
